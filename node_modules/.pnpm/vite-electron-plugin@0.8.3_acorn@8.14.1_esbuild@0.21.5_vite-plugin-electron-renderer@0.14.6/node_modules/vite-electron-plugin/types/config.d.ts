import type { ViteDevServer, ResolvedConfig as ViteResolvedConfig } from 'vite';
import { type Configuration as Configuration2, type ResolvedConfig as ResolvedConfig2 } from 'notbundle';
export interface Configuration extends Omit<Configuration2, 'output' | 'plugins' | 'transformOptions'> {
    /** @default 'dist-electron' */
    outDir?: string;
    api?: {
        vite?: {
            resolvedConfig?: ViteResolvedConfig;
            server?: ViteDevServer;
        };
        [key: string]: any;
    };
    plugins?: (Omit<NonNullable<Configuration2['plugins']>[number], 'configResolved'> & {
        configResolved?: (config: ResolvedConfig) => void | Promise<void>;
    })[];
    transformOptions?: import('esbuild').TransformOptions;
}
export interface ResolvedConfig extends Omit<ResolvedConfig2, 'config' | 'output' | 'plugins' | 'experimental' | 'transformOptions'> {
    config: Configuration;
    /** Absolute path */
    outDir: string;
    api: NonNullable<Configuration['api']>;
    plugins: NonNullable<Configuration['plugins']>;
    transformOptions: import('esbuild').TransformOptions;
    /** Internal functions (ðŸš¨ Experimental) */
    experimental: Omit<ResolvedConfig2['experimental'], 'include2files' | 'include2globs'> & {
        include2files: (config: ResolvedConfig, include?: string[]) => string[];
        include2globs: (config: ResolvedConfig, include?: string[]) => string[];
        /** Electron App startup function */
        startup: (args?: string[]) => void;
        /** Reload Electron-Renderer */
        reload: () => void;
    };
}
export type Plugin = NonNullable<Configuration['plugins']>[number];
export declare function polyfillConfig(config: Configuration): Configuration;
