import { startup } from "vite-plugin-electron";
import { startup as startup2 } from "vite-plugin-electron";
import path from "node:path";
import { normalizePath, build as build$1, watch as watch$1 } from "notbundle";
function polyfillConfig(config) {
  const {
    outDir = "dist-electron",
    plugins = []
  } = config;
  config.plugins = [{
    name: "electron:polyfill-config",
    configResolved(_config) {
      _config.outDir = normalizePath(path.isAbsolute(outDir) ? outDir : path.join(_config.root, outDir));
      _config.api = config.api ?? {};
      _config.experimental.startup = startup;
      _config.experimental.reload = () => {
        var _a, _b, _c;
        (_c = (_b = (_a = _config.config.api) == null ? void 0 : _a.vite) == null ? void 0 : _b.server) == null ? void 0 : _c.ws.send({ type: "full-reload" });
      };
      _config.output = _config.outDir;
      const swc = _config.plugins.findIndex((c) => c.name === ":swc");
      swc !== -1 && _config.plugins.splice(swc, 1, esbuildPlugin(_config));
    }
  }].concat(plugins);
  return config;
}
function esbuildPlugin(config) {
  var _a, _b;
  delete config.transformOptions.env;
  delete config.transformOptions.module;
  (_a = config.transformOptions).format ?? (_a.format = "cjs");
  (_b = config.transformOptions).target ?? (_b.target = "node14");
  let esbuild;
  return {
    name: "electron:esbuild",
    async transform({ filename, code }) {
      esbuild ?? (esbuild = await import("esbuild"));
      const { transformOptions } = config;
      return esbuild.transformSync(code, {
        loader: path.extname(filename).slice(1),
        ...transformOptions
      });
    }
  };
}
function defineConfig(config) {
  return config;
}
function build(config) {
  return build$1(polyfillConfig(config));
}
function watch(config) {
  return watch$1(polyfillConfig(config));
}
function electron(config) {
  let resolvedConfig;
  let viteDevServer;
  const getConfig = (_config = config) => {
    var _a, _b, _c;
    _config.api ?? (_config.api = {});
    (_a = _config.api).vite ?? (_a.vite = {});
    (_b = _config.api.vite).resolvedConfig ?? (_b.resolvedConfig = resolvedConfig);
    (_c = _config.api.vite).server ?? (_c.server = viteDevServer);
    return _config;
  };
  const options = {
    config(_config) {
      _config.base ?? (_config.base = "./");
    },
    configResolved(_config) {
      resolvedConfig = _config;
    }
  };
  return [
    {
      name: "vite-electron-plugin",
      apply: "serve",
      ...options,
      configureServer(server) {
        var _a;
        viteDevServer = server;
        (_a = server.httpServer) == null ? void 0 : _a.once("listening", async () => {
          var _a2;
          const addressInfo = server.httpServer.address();
          Object.assign(process.env, {
            VITE_DEV_SERVER_URL: `http://localhost:${addressInfo.port}`
          });
          const _config = getConfig();
          _config.plugins ?? (_config.plugins = []);
          _config.plugins.push(startupPlugin());
          (_a2 = process._plugin_watcher) == null ? void 0 : _a2.close();
          process._plugin_watcher = await watch(_config);
        });
      }
    },
    {
      name: "vite-electron-plugin",
      apply: "build",
      ...options,
      closeBundle() {
        build(getConfig());
      }
    }
  ];
}
function startupPlugin() {
  let config;
  let startup_fn;
  const files = [];
  return {
    name: ":startup",
    configResolved(_config) {
      const { api: { vite }, experimental } = _config;
      config = vite == null ? void 0 : vite.resolvedConfig;
      if ((config == null ? void 0 : config.command) === "serve") {
        startup_fn = debounce(() => {
          const reload = _config.extensions.some((ext) => files.every((file) => file.endsWith("reload" + ext)));
          files.length = 0;
          if (reload) {
            experimental.reload();
          } else {
            experimental.startup();
          }
        });
      }
    },
    ondone({ filename }) {
      if ((config == null ? void 0 : config.command) === "serve") {
        files.push(filename);
        startup_fn();
      }
    }
  };
}
function debounce(fn, delay = 299) {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn(...args), delay);
  };
}
export {
  build,
  electron as default,
  defineConfig,
  startup2 as startup,
  watch
};
